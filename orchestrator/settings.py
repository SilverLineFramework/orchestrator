"""Django settings for orchestrator project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import json
import datetime
import logging


def _load(filename):
    try:
        with open(os.path.join(BASE_DIR, filename)) as f:
            return json.load(f)
    except FileNotFoundError:
        return {}


# --------------------------------------------------------------------------- #
#                                 Django Core                                 #
# --------------------------------------------------------------------------- #

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
ARTS_DIR = os.path.dirname(BASE_DIR)


# --------------------------------- Security -------------------------------- #

# Includes 'localhost' if running in DEBUG=True.
# https://docs.djangoproject.com/en/4.0/ref/settings/#allowed-hosts
_server_file = _load("server.json")

ALLOWED_HOSTS = []
if "host" in _server_file:
    ALLOWED_HOSTS.append(_server_file.get("host", "localhost"))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = _server_file.get("debug", True)

# Load key file; forgives errors if running in debug mode.
_key_file = _load("key.json")
try:
    SECRET_KEY = _key_file["key"]
except KeyError:
    if not DEBUG:
        raise Exception("Secret key file `key.json` not found.")
    else:
        SECRET_KEY = "NOT_A_SECRET_KEY"

# ------------------------------ Server Sources ----------------------------- #

# Application definition
INSTALLED_APPS = [
    'api.apps.apiConfig',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
]

# All default
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'orchestrator.urls'

WSGI_APPLICATION = 'orchestrator.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# --------------------------------------------------------------------------- #
#                                     MQTT                                    #
# --------------------------------------------------------------------------- #

# MQTT Server
_mqtt_file = _load('mqtt.json')

REALM = _mqtt_file.get('realm', 'realm')
MQTT_HOST = _mqtt_file.get('host', 'localhost')
MQTT_PORT = _mqtt_file.get('port', 1883)
MQTT_SSL = _mqtt_file.get('ssl', False)

# MQTT Credentials
_mqtt_credentials = _load('credentials.json')
MQTT_USERNAME = _mqtt_credentials.get('username', 'arts')
MQTT_PASSWORD = _mqtt_credentials.get('password', '')

MQTT_ROOT = "/".join([REALM, "proc"])
MQTT_LOG = "/".join([MQTT_ROOT, "log", "orchestrator"])

MQTT_TOPICS = {
    topic: '/'.join([MQTT_ROOT, topic])
    for topic in ["reg", "control", "keepalive"]
}

logging.basicConfig(level=logging.DEBUG)
